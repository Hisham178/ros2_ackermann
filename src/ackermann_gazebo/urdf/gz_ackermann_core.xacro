<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
    <!-- GAZEBO COLOUR -->
    <!-- Gazebo is unable to use the same <material> tags that are already in the URDF (that RViz
    uses). -->
    <!-- Instead, we need to add gazebo tags for our links that refer to Gazebo materials -->
    <gazebo reference="chassis_link">
        <material>Gazebo/White</material>
        <mu1>0.5</mu1>
        <mu2>0.5</mu2>
    </gazebo>
    <gazebo reference="fr_left_wheel_link">
        <material>Gazebo/Grey</material>
        <mu1>1.0</mu1>
        <mu2>1.0</mu2>
    </gazebo>
    <gazebo reference="fr_right_wheel_link">
        <material>Gazebo/Grey</material>
        <mu1>1.0</mu1>
        <mu2>1.0</mu2>
    </gazebo>
    <gazebo reference="re_left_wheel_link">
        <material>Gazebo/Grey</material>
        <mu1>1.0</mu1>
        <mu2>1.0</mu2>
    </gazebo>
    <gazebo reference="re_right_wheel_link">
        <material>Gazebo/Grey</material>
        <mu1>1.0</mu1>
        <mu2>1.0</mu2>
    </gazebo>
    <gazebo reference="virtual_steer_link">
        <material>Gazebo/Yellow</material>
    </gazebo>


    <!-- JOINT STATE PUBLISHER -->
    <!-- Gazebo requires the use of plugins to interact with other systems such as ROS. -->
    <!-- This plugin will publish the joint_states for the selected joints 
            (which robot_state_publisher can then use to broadcast the approprate tf). 
         Using Gazebo ROS2 control plugin (ros2_control) (part of ROS2 control system) publishing and
    control of joint.-->
    <gazebo>
        <plugin name="gazebo_ros_joint_state_publisher"
            filename="libgazebo_ros_joint_state_publisher.so">
            <update_rate>100</update_rate>
            <joint_name>fr_right_steer_joint</joint_name>
            <joint_name>fr_right_wheel_joint</joint_name>
            <joint_name>fr_left_steer_joint</joint_name>
            <joint_name>fr_left_wheel_joint</joint_name>
            <joint_name>re_right_wheel_joint</joint_name>
            <joint_name>re_left_wheel_joint</joint_name>
            <joint_name>virtual_steering_wheel_joint</joint_name>
        </plugin>
    </gazebo>

    <!-- This plugin will read a JointTrajectory message from the /set_joint_trajectory topic 
            and move the machine accordingly. It's a bit clunky but it works. -->
    <!-- You'll probably want to add damping to the joints to stop them it flopping around. 
            e.g. <dynamics damping="10.0" friction="10.0"/> -->
    <!-- Here's an example message to publish to test it:
            ros2 topic pub -1 /set_joint_trajectory trajectory_msgs/msg/JointTrajectory  '{header: {frame_id:
    world}, joint_names: [slider_joint, arm_joint], points: [  {positions: {0.8,0.6}} ]}' -->
    <gazebo>
        <plugin name="gazebo_ros_joint_pose_trajectory"
            filename="libgazebo_ros_joint_pose_trajectory.so">
            <update_rate>2</update_rate>
        </plugin>
    </gazebo>


    <!-- ACKERMANN DRIVE PLUGIN -->
    <gazebo>
        <plugin name='gazebo_ackermann_drive' filename='libgazebo_ros_ackermann_drive.so'>
            <ros>
                <!-- <namespace>ugv_gazebo_ackermann</namespace> -->
                <remapping>cmd_vel:=cmd_vel</remapping>
                <remapping>odom:=odom/bot</remapping>
                <remapping>distance:=distance/bot</remapping>
            </ros>

            <update_rate>100.0</update_rate>

            <!-- wheels -->
            <front_left_joint>fr_left_wheel_joint</front_left_joint>
            <front_right_joint>fr_right_wheel_joint</front_right_joint>
            <rear_left_joint>re_left_wheel_joint</rear_left_joint>
            <rear_right_joint>re_right_wheel_joint</rear_right_joint>
            <left_steering_joint>fr_left_steer_joint</left_steering_joint>
            <right_steering_joint>fr_right_steer_joint</right_steering_joint>
            <steering_wheel_joint>virtual_steering_wheel_joint</steering_wheel_joint>

            <!-- Max absolute steer angle for tyre in radians-->
            <!-- Any cmd_vel angular z greater than this would be capped -->
            <max_steer>0.383972</max_steer>

            <!-- Max absolute steering angle of steering wheel -->
            <max_steering_angle>1.570796</max_steering_angle>

            <!-- Max absolute linear speed in m/s -->
            <max_speed>5</max_speed>

            <!-- PID tuning -->
            <left_steering_pid_gain>1500 0 1</left_steering_pid_gain>
            <left_steering_i_range>0 0</left_steering_i_range>
            <right_steering_pid_gain>1500 0 1</right_steering_pid_gain>
            <right_steering_i_range>0 0</right_steering_i_range>
            <linear_velocity_pid_gain>1500 0 1</linear_velocity_pid_gain>
            <linear_velocity_i_range>0 0</linear_velocity_i_range>

            <!-- output -->
            <publish_odom>true</publish_odom>
            <publish_odom_tf>true</publish_odom_tf>     <!-- Don't pubslish this when using robot
            localization -->
            <publish_wheel_tf>false</publish_wheel_tf>  <!-- Don't publish this. It will override all
            wheel frames to robot_base_frame parameter below.-->
            <publish_distance>true</publish_distance>

            <odometry_frame>odom</odometry_frame>
            <robot_base_frame>base_footprint</robot_base_frame>

        </plugin>
    </gazebo>

    <!-- Virtual Steering wheel -->
    <link name="virtual_steer_link">
        <visual>
            <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
            <geometry>
                <box size="0.01 0.15 0.075" />
            </geometry>
            <material name="">
                <color rgba="1.0 1.0 0.0 1" />
            </material>
        </visual>
        <inertial>  <!-- Gazebo won't show this link without this inertial mass -->
            <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
            <mass value="0.001" />
            <inertia ixx="0.0" ixy="0.0" ixz="0.0" iyy="0.0" iyz="0.0" izz="0.0" />
        </inertial>
    </link>
    <joint name="virtual_steering_wheel_joint" type="revolute">
        <origin xyz="-0.32 0.0 0.0" rpy="0.0 0.0 0.0" />
        <parent link="chassis_link" />
        <child link="virtual_steer_link" />
        <axis xyz="-1 0 0" />
        <limit lower="-3" upper="3" effort="200" velocity="20" />
    </joint>

</robot>